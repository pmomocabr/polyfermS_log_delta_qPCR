 ---
title: "polyfermS_ratio_calculation"
author: "Paula"
last update: "Jan 2023"
---

```{r setup, include=FALSE}
rm(list = ls()) # remove all the object before starting
knitr::opts_chunk$set(echo = TRUE)
```

# Load packages

```{r,packages,message=FALSE}
library(tidyverse)
library(phyloseq)
library(speedyseq)
```

# Load functions from Github

```{r, message = TRUE, warning = TRUE}


source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_alpha.R")
source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_beta.R")
source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_heatmap.R")
source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_normalisation.R")
source("https://raw.githubusercontent.com/fconstancias/metabarcodingRpipeline/dev/scripts/functions_export_simplified.R")
source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_alpha.R") 
source("https://raw.githubusercontent.com/mahendra-mariadassou/phyloseq-extended/415075fb7f690f6ac39eab18f62aeb4e4967ef84/R/graphical_methods.R")

```


# Load the phyloseq object and filter:

```{r, message = FALSE, warning= FALSE}
ps = "C:/Users/pmomocabr/Desktop/phyloseq.RDS"

ps %>%
  readRDS() %>%
  phyloseq_get_strains_fast() %>% # allows to add a 'Strain' level information - finest known taxonomy + ASV id.
  subset_samples(owner == "Paula" &
                   Source == "Fermentor") -> ps

ps
```  

# Update metadata
```{r, message = FALSE, warning= FALSE}
ps %>%
  physeq_add_metadata(physeq = .,
                      metadata = "C:/Users/pmomocabr/Desktop/final_files/mapping_final_non_rare_corrected.xlsx" %>%
                        readxl::read_xlsx(),
                      sample_column = "sample_name") %>% 
  subset_samples(owner == "Paula" & 
                   Stab_Treat %in% c("STAB", "TREAT")) %>% 
  subset_samples(Treatment %in% c("IR","IRON", "P204", "P204+IRON", "P109", "P109+IRON", "P507","P507+IRON")) -> ps_new

ps_new

``` 

# Filter again for donor and WP of interest
```{r}
ps_new %>% 
  subset_samples(Donor == "D3" & WP == "WP1") -> ps_new

```


Some of the metadata were not stored as numeric/double

```{r}
ps_new %>% 
  subset_samples(Period==2) %>%
  sample_data() %>% 
  data.frame() %>% 
  mutate(EPEC = as.double(EPEC)) %>% 
  mutate(EPEC = as.double(EPEC)) -> sample_data(ps_new)
```

# Function for ratio metadata

```{r}
meta_sel = c("sample_name","Stab_Treat", "Period", "Reactor","Timepoint", "Treatment","Period")
meta_plot = "EPEC"

plot_ratio_Stab_Treat_meta <- function(ps_new,
                                       meta_sel = c("sample_name","Stab_Treat", "Period", "Reactor","Timepoint", "Treatment","Period"), 
                                       meta_plot = "EPEC", 
                                       plot = TRUE,
                                       stats = FALSE,
                                       ref_group_stat = "IR"){
  
  #### ------------- get pairwise sample combinations
  
  ps_new %>%  
    sample_names() %>% 
    as.vector() -> samples_names
  
  tibble::tibble(Sample_A = samples_names,
                 Sample_B = samples_names) %>% 
    tidyr::expand(Sample_A, Sample_B) %>% 
    dplyr::filter(Sample_A != Sample_B) -> sample_pw  # remove self comparaisons 
  
  #### ------------- Extracting metadata based on meta_sel parameter
  
  ps_new %>%
    sample_data() %>% 
    data.frame() %>% 
    dplyr::select(one_of(meta_sel, meta_plot)) %>% 
    dplyr::rename(meta_plot = all_of(meta_plot)) -> meta_data
  
  meta_data_A <- meta_data
  meta_data_B <- meta_data
  
  names(meta_data_A) <- paste0(names(meta_data), "_A")
  names(meta_data_B) <- paste0(names(meta_data), "_B")
  
  #### ------------- Joining metadata with pairwise sample comparaisons
  
  sample_pw %>% 
    left_join(meta_data_A,
              by = c("Sample_A" = "sample_name_A")) %>% 
    left_join(meta_data_B,
              by = c("Sample_B" = "sample_name_B")) %>% 
    filter(Stab_Treat_A  %in% "STAB" & # Sample_A has to be STAB  (Stab_Treat_A colum)
             Stab_Treat_B == "TREAT" & # and Sample_B has to be TREAT (Stab_Treat_B colum)
             Period_A == Period_B, # and Period_A (of Sample_A has to be the same as the period of Sample_B - no between period ratios)
           Treatment_A == Treatment_B) -> sample_pw_meta # only within treatment ratios 
  
  #### ------------- Joining OTU abundance with pairwise sample comparisons + metadata already filtered above
  
  as.numeric(sample_pw_meta$meta_plot_A)
  as.numeric(sample_pw_meta$meta_plot_B)
   
  sample_pw_meta %>% 
    dplyr::mutate(ratio = log10(meta_plot_B) - log10(meta_plot_A)) %>%  # computing ratio
    dplyr::mutate(log10_ratio = ratio) -> sample_pw_meta
  
  #### -------------  
  
  # sample_pw_meta %>%
  #   dplyr::filter(is.finite(log10_ratio)) %>%
  #   group_by(Period_A, Reactor_A, Treatment_A, meta_plot_A) %>%
  #   add_count() %>% # select(n, OTU_A)
  #   filter(n() >= n_filter) %>% # keeping only OTU (Genus, ...) with at least n_filter pairwise comparaisons
  #   ungroup() -> sample_pw_meta_filt
  
  #### -------- plot
  if(plot == TRUE){
    
    boxplot_ratio <- sample_pw_meta %>% 
      ggplot(., aes(x = Treatment_A, y = log10_ratio)) +
      geom_boxplot(aes(color = Treatment_A, fill = Treatment_A),
                   outlier.shape = NA,
                   outlier.colour = NA,
                   alpha = 0.4, position = position_dodge2(preserve = "single")) +
      geom_point(aes(color = Treatment_A, shape = Period_A),
                 alpha = 0.3, size  = 1.25,  position = position_jitterdodge(dodge.width = 0.8)) +
      # facet_grid(. ~ OTU_A  , scales = "free") +
      ylab(paste0("log10 ratio Treat/Stab ", meta_plot)) + xlab(NULL) + #ylim(c(0,1)) +
      theme_light() + #theme(legtheme(legend.position = "none") + 
      ggpubr::rotate_x_text(45)  
    
    out <- list("df" = sample_pw_meta,
                "plot" = boxplot_ratio)
  }
  
  #### -------- Stats
  if(stats == TRUE){
    
    sample_pw_meta %>%
      group_by(meta_plot_A, Period_A)-> sample_pw_meta1
      rstatix::wilcox_test(log10_ratio ~ Treatment_A,
                           data = sample_pw_meta) ->rstts 
      rstts %>%
      #ref.group = "NA" %>% 
      #filter(group1 == !!ref_group_stat) %>% 
      rstatix::adjust_pvalue(method = "fdr") %>%
      rstatix::add_significance("p.adj") -> boxplot_ratio_stats
    
    out <- list("df" = sample_pw_meta,
                "plot" = boxplot_ratio,
                "stats" = stats)
  }
  if(stats == FALSE & plot == FALSE){
    out <- list("df" = sample_pw_meta)
  }
  
  
  return(out)
}
```

Save ratio dataframes and statistical analysis

```{r}
library(writexl)
write_xlsx(boxplot_ratio_stats,"C:/Users/pmomocabr/Desktop/final_files/delta2/statsdelta_EPEC_D3_P2_WP1.xlsx")
```

```{r}
library(writexl)
write_xlsx(sample_pw_meta,"C:/Users/pmomocabr/Desktop/final_files/delta2/pre_statsdelta_EPEC_D3_P2_WP1.xlsx")
```

